{"version":3,"sources":["AirplaneButton.js","App.js","serviceWorker.js","index.js"],"names":["AirplaneButton","props","onClick","react_default","a","createElement","className","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","airplanes","getAirplanes","bind","assertThisInitialized","fetch","json","setState","haveAirplanes","length","map","airplane","key","id","style","margin","fontWeight","tailNumber","origin","src_AirplaneButton","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAQeA,SANQ,SAAAC,GACvB,IAAMC,EAAUD,EAAMC,QACtB,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaJ,QAASA,GAAxC,gCC4CQK,cA3Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,UAAW,IAGbR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANRA,4MAUYY,MAAM,4BAAxBJ,cAENL,cACmBK,EAAUK,gCAA3BL,qBADGM,4JAML,IAAMC,EAAgBZ,KAAKI,MAAMC,UAAUQ,OAAS,EAChDR,EACAL,KAAKI,MAAMC,UAAUS,IAAI,SAACC,GAAD,OACvBvB,EAAAC,EAAAC,cAAA,OAAKsB,IAAKD,EAASE,GAAIC,MAAO,CAACC,OAAU,eACvC3B,EAAAC,EAAAC,cAAA,KAAGwB,MAAO,CAACC,OAAU,IAAKC,WAAc,SAAUL,EAASM,YAC3D7B,EAAAC,EAAAC,cAAA,KAAGwB,MAAO,CAACC,OAAU,MAAOJ,EAASO,WAO7C,OAFKV,IAAiBP,EAAYb,EAAAC,EAAAC,cAAA,KAAGwB,MAAO,CAACC,OAAU,MAArB,sBAGhC3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,uBACCW,EAEDb,EAAAC,EAAAC,cAAC6B,EAAD,CAAgBhC,QAASS,KAAKM,wBArCtBkB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c5f58ace.chunk.js","sourcesContent":["import React from 'react';\n\nconst AirplaneButton = props => {\nconst onClick = props.onClick;\nreturn <button className=\"App-button\" onClick={onClick}>\n            It's a bird! It's a plane!\n          </button> };\n\nexport default AirplaneButton;\n","import React, { Component } from 'react';\nimport './App.css';\nimport AirplaneButton from './AirplaneButton';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      airplanes: []\n    };\n\n    this.getAirplanes = this.getAirplanes.bind(this);\n  }\n\n  async getAirplanes() {\n    const airplanes = await fetch('/airplanes');\n\n    this.setState({\n      airplanes: await airplanes.json()\n    });\n  }\n\n  render() {\n    const haveAirplanes = this.state.airplanes.length > 0;\n    let airplanes = (\n        this.state.airplanes.map((airplane) =>\n          <div key={airplane.id} style={{\"margin\": \"2rem 0 0 0\"}}>\n            <p style={{\"margin\": \"0\", \"fontWeight\": \"bold\"}}>{airplane.tailNumber}</p>\n            <p style={{\"margin\": \"0\"}}>{airplane.origin}</p>\n          </div>\n        )\n    )\n\n    if (!haveAirplanes) { airplanes = <p style={{\"margin\": \"0\"}}>No airplanes here</p>}\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Airplanes</h1>\n          {airplanes}\n\n          <AirplaneButton onClick={this.getAirplanes} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}